name: Docker Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test before building
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint || true
      
      - name: Type check
        run: npm run typecheck || true
      
      - name: Run tests
        run: npm run test || true

  # Build Docker image
  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push backend Docker image
        id: push-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Build and push frontend Docker image
        id: push-frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VITE_AUTH0_DOMAIN=${{ vars.VITE_AUTH0_DOMAIN }}
            VITE_AUTH0_CLIENT_ID=${{ vars.VITE_AUTH0_CLIENT_ID }}
            VITE_AUTH0_AUDIENCE=${{ vars.VITE_AUTH0_AUDIENCE }}
            VITE_API_URL=${{ vars.VITE_API_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Generate artifact attestation for backend
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          subject-digest: ${{ steps.push-backend.outputs.digest }}
          push-to-registry: true
      
      - name: Generate artifact attestation for frontend
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          subject-digest: ${{ steps.push-frontend.outputs.digest }}
          push-to-registry: true

  # Security scan
  security:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner for backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-backend
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
      
      - name: Run Trivy vulnerability scanner for frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-frontend
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
      
      - name: Upload Trivy backend results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'
      
      - name: Upload Trivy frontend results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  # Deploy to staging (optional)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.pulseplay.ai
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging server..."
          
          # Login to container registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Update docker-compose.atlas.yml to use built images
          sed -i 's|    build:|    image: ghcr.io/${{ github.repository }}:develop-backend|' docker-compose.atlas.yml
          sed -i '/context: ./d' docker-compose.atlas.yml
          sed -i '/dockerfile: Dockerfile/d' docker-compose.atlas.yml
          sed -i '/target: production/d' docker-compose.atlas.yml
          sed -i 's|    build:|    image: ghcr.io/${{ github.repository }}:develop-frontend|' docker-compose.atlas.yml
          sed -i '/dockerfile: Dockerfile.frontend/d' docker-compose.atlas.yml
          sed -i '/args:/d' docker-compose.atlas.yml
          sed -i '/VITE_AUTH0_DOMAIN:/d' docker-compose.atlas.yml
          sed -i '/VITE_AUTH0_CLIENT_ID:/d' docker-compose.atlas.yml
          sed -i '/VITE_AUTH0_AUDIENCE:/d' docker-compose.atlas.yml
          sed -i '/VITE_API_URL:/d' docker-compose.atlas.yml
          
          # Pull latest images
          docker-compose -f docker-compose.atlas.yml pull
          
          # Deploy
          docker-compose -f docker-compose.atlas.yml up -d
          
          echo "Staging deployment completed"

  # Deploy to production (optional)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://pulseplay.ai
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production server..."
          
          # Login to container registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Update docker-compose.atlas.yml to use built images
          sed -i 's|    build:|    image: ghcr.io/${{ github.repository }}:latest-backend|' docker-compose.atlas.yml
          sed -i '/context: ./d' docker-compose.atlas.yml
          sed -i '/dockerfile: Dockerfile/d' docker-compose.atlas.yml
          sed -i '/target: production/d' docker-compose.atlas.yml
          sed -i 's|    build:|    image: ghcr.io/${{ github.repository }}:latest-frontend|' docker-compose.atlas.yml
          sed -i '/dockerfile: Dockerfile.frontend/d' docker-compose.atlas.yml
          sed -i '/args:/d' docker-compose.atlas.yml
          sed -i '/VITE_AUTH0_DOMAIN:/d' docker-compose.atlas.yml
          sed -i '/VITE_AUTH0_CLIENT_ID:/d' docker-compose.atlas.yml
          sed -i '/VITE_AUTH0_AUDIENCE:/d' docker-compose.atlas.yml
          sed -i '/VITE_API_URL:/d' docker-compose.atlas.yml
          
          # Pull latest images
          docker-compose -f docker-compose.atlas.yml pull
          
          # Deploy
          docker-compose -f docker-compose.atlas.yml up -d
          
          echo "Production deployment completed"
