version: '3.8'

# Docker Compose configuration for MongoDB Atlas
# Use this when connecting to MongoDB Atlas instead of local MongoDB

services:
  # Backend API Service (connects to MongoDB Atlas)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: pulseplay-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      # MongoDB Atlas connection string
      MONGODB_URI: ${MONGODB_ATLAS_URI}
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_ISSUER_BASE_URL: ${AUTH0_ISSUER_BASE_URL}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173}
      GRADIENT_AI_API_KEY: ${GRADIENT_AI_API_KEY:-}
      SENTRY_DSN: ${SENTRY_DSN:-}
    networks:
      - pulseplay-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Nginx serving static files with built-in frontend)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: pulseplay-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-5173}:80"
    depends_on:
      - backend
    networks:
      - pulseplay-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  pulseplay-network:
    driver: bridge
