/**
 * Audio synthesis service for generating ambient Lofi music
 * Uses Web Audio API OscillatorNode for real-time sound generation
 * Supports both continuous ambient soundscapes and per-keystroke instrumental notes
 * @module services/audioService
 */

import { getAudioContext } from '../lib/audioContext';
import type { Mood } from '../../backend/src/types';
import type { InstrumentConfig } from '../lib/instruments';

export interface AudioConfig {
	baseFrequency: number;
	tempo: number; // BPM
	volume: number; // 0-1
	waveform: OscillatorType;
}

/**
 * Mood to audio configuration mapping
 */
const MOOD_CONFIGS: Record<Mood, AudioConfig> = {
	'deep-focus': {
		baseFrequency: 160, // Hz - Low, calming frequency
		tempo: 60, // BPM - slow, steady
		volume: 0.5, // 50% volume
		waveform: 'sine',
	},
	'melodic-flow': {
		baseFrequency: 262, // Hz - C4 (piano ballad key)
		tempo: 60, // BPM - slow, emotional
		volume: 0.5, // 50% volume
		waveform: 'sine',
	},
	'jazz-harmony': {
		baseFrequency: 220, // Hz - A3 (jazz key center)
		tempo: 90, // BPM - medium swing feel
		volume: 0.5, // 50% volume
		waveform: 'sine',
	},
	'thousand-years': {
		baseFrequency: 262, // Hz - C4 (Christina Perri key)
		tempo: 75, // BPM - slow romantic ballad (from MIDI)
		volume: 0.45, // 45% volume - gentle piano
		waveform: 'sine',
	},
	'kiss-the-rain': {
		baseFrequency: 262, // Hz - C4 (Yiruma key)
		tempo: 58, // BPM - slow, emotional (from MIDI)
		volume: 0.45, // 45% volume - gentle piano
		waveform: 'sine',
	},
	'river-flows': {
		baseFrequency: 262, // Hz - C4 (Yiruma key center)
		tempo: 65, // BPM - slow, emotional (from MIDI)
		volume: 0.45, // 45% volume - gentle piano
		waveform: 'sine',
	},
	'gurenge': {
		baseFrequency: 262, // Hz - C4 (Demon Slayer key)
		tempo: 135, // BPM - fast, energetic anime opening (from MIDI)
		volume: 0.45, // 45% volume - dynamic anime theme
		waveform: 'sine',
	},
};

export class AudioEngine {
	private ctx: AudioContext;
	private masterGain: GainNode;
	private oscillators: OscillatorNode[] = [];
	private filters: BiquadFilterNode[] = [];
	private isPlaying = false;
	private currentMood: Mood | null = null;
	private drumLoopInterval: NodeJS.Timeout | null = null;
	private vinylNoiseNode: AudioBufferSourceNode | null = null;
	private currentScaleIndex = 0; // Track position in scale for melodic progression
	private melodyIndex = 0; // Track position in melody sequence
	private jazzChordIndex = 0; // Track current jazz chord in progression
	private jazzChordOscillators: OscillatorNode[] = []; // Active jazz chord oscillators
	private jazzProgressionInterval: NodeJS.Timeout | null = null; // Jazz chord change timer
	private activePianoOscillators: { osc: OscillatorNode; gain: GainNode }[] = []; // Track active piano notes to prevent overlap
	
	// Kiss The Rain (Yiruma) - MIDI-extracted notes (58 BPM)
	// Background notes (< C4 / 261.63Hz) - continuous ambient layer
	private readonly kissTheRainBass = [207.65, 233.08, 155.56, 233.08, 233.08, 103.83, 155.56, 155.56, 233.08, 155.56, 207.65, 103.83, 130.81, 196, 196, 196, 130.81, 87.31, 130.81, 196, 130.81, 207.65, 130.81, 174.61, 130.81, 77.78, 130.81, 196, 138.59, 207.65, 207.65, 207.65, 138.59, 130.81, 207.65, 207.65, 207.65, 116.54, 207.65, 174.61, 207.65, 116.54, 77.78, 116.54, 196, 155.56, 233.08, 103.83, 155.56, 233.08, 138.59, 207.65, 207.65, 207.65, 138.59, 130.81, 207.65, 207.65, 130.81, 116.54, 207.65, 174.61, 207.65, 116.54, 77.78, 116.54, 207.65, 155.56, 233.08, 103.83, 155.56, 155.56, 233.08, 155.56, 207.65, 103.83, 146.83, 207.65, 146.83, 246.94, 98, 146.83, 246.94, 146.83, 130.81, 196, 174.61, 116.54, 207.65, 174.61, 174.61, 207.65, 174.61, 233.08, 116.54, 77.78, 116.54, 207.65, 116.54, 196, 155.56, 196, 103.83, 155.56, 155.56, 233.08, 155.56, 207.65, 103.83, 130.81, 196, 196, 196, 130.81, 87.31, 130.81, 196, 130.81, 207.65, 130.81, 174.61, 130.81, 77.78, 130.81, 196, 155.56, 138.59, 207.65, 207.65, 207.65, 138.59, 130.81, 207.65, 207.65, 207.65, 130.81, 116.54, 207.65, 174.61, 207.65, 174.61, 207.65, 174.61, 207.65, 116.54, 77.78, 116.54, 207.65, 116.54, 196, 155.56, 196, 155.56, 103.83, 155.56, 155.56, 233.08, 155.56, 207.65, 103.83, 130.81, 196, 196, 196, 130.81, 87.31, 130.81, 196, 130.81, 207.65, 130.81, 174.61, 130.81, 77.78, 130.81, 196, 155.56, 138.59, 207.65, 207.65, 207.65, 138.59, 130.81, 207.65, 207.65, 207.65, 130.81, 116.54, 207.65, 174.61, 207.65, 116.54, 77.78, 116.54, 196, 155.56, 233.08, 103.83, 155.56, 233.08, 138.59, 207.65, 207.65, 207.65, 138.59, 130.81, 207.65, 207.65, 207.65, 130.81, 116.54, 207.65, 174.61, 207.65, 116.54, 77.78, 116.54, 207.65, 155.56, 233.08, 103.83, 155.56, 155.56, 233.08, 155.56, 207.65, 103.83, 146.83, 207.65, 207.65, 146.83, 246.94, 98, 146.83, 246.94, 130.81, 196, 174.61, 116.54, 207.65, 174.61, 174.61, 207.65, 174.61, 233.08, 116.54, 77.78, 116.54, 207.65, 116.54, 196, 155.56, 196, 155.56, 103.83, 155.56, 155.56, 233.08, 155.56, 207.65, 103.83, 130.81, 196, 196, 196, 130.81, 87.31, 130.81, 196, 130.81, 207.65, 130.81, 174.61, 130.81, 77.78, 130.81, 196, 155.56, 138.59, 207.65, 207.65, 207.65, 138.59, 130.81, 207.65, 207.65, 207.65, 138.59, 123.47, 220, 185, 220, 123.47, 82.41, 123.47, 207.65, 164.81, 110, 164.81, 246.94, 110, 164.81, 246.94, 110, 164.81, 246.94, 110, 110, 164.81, 55, 110];
	// Melody notes (>= C4 / 261.63Hz) - keystroke/mouse triggered
	private readonly kissTheRainMelody = [622.25, 830.61, 932.33, 932.33, 1046.5, 311.13, 1046.5, 466.16, 311.13, 415.3, 830.61, 932.33, 1046.5, 932.33, 622.25, 261.63, 1244.51, 392, 1244.51, 523.25, 392, 622.25, 1244.51, 1396.91, 1567.98, 1567.98, 830.61, 1244.51, 349.23, 1661.22, 523.25, 1661.22, 783.99, 523.25, 698.46, 1864.66, 523.25, 1864.66, 1046.5, 783.99, 2093, 1864.66, 1661.22, 1567.98, 1046.5, 311.13, 523.25, 783.99, 622.25, 523.25, 1046.5, 622.25, 1661.22, 1567.98, 1244.51, 1244.51, 830.61, 277.18, 1396.91, 415.3, 1396.91, 830.61, 622.25, 415.3, 698.46, 554.37, 415.3, 830.61, 622.25, 1244.51, 1108.73, 1108.73, 622.25, 932.33, 261.63, 1244.51, 415.3, 1244.51, 523.25, 415.3, 622.25, 415.3, 523.25, 830.61, 932.33, 1046.5, 554.37, 1108.73, 349.23, 1108.73, 466.16, 349.23, 554.37, 415.3, 698.46, 349.23, 1244.51, 466.16, 1108.73, 1046.5, 554.37, 698.46, 415.3, 932.33, 392, 622.25, 830.61, 932.33, 932.33, 622.25, 1046.5, 1046.5, 622.25, 261.63, 622.25, 830.61, 932.33, 1046.5, 932.33, 622.25, 1244.51, 1244.51, 622.25, 311.13, 622.25, 392, 783.99, 311.13, 1244.51, 1396.91, 1567.98, 1567.98, 783.99, 1244.51, 1661.22, 1661.22, 830.61, 1864.66, 932.33, 2093, 1046.5, 1864.66, 932.33, 1661.22, 830.61, 783.99, 1567.98, 392, 261.63, 523.25, 311.13, 830.61, 1661.22, 261.63, 783.99, 1567.98, 311.13, 622.25, 1244.51, 622.25, 1244.51, 698.46, 1396.91, 698.46, 1396.91, 311.13, 349.23, 277.18, 415.3, 311.13, 1244.51, 1108.73, 1108.73, 622.25, 932.33, 1244.51, 1244.51, 622.25, 261.63, 311.13, 622.25, 261.63, 830.61, 932.33, 1046.5, 554.37, 1108.73, 698.46, 830.61, 554.37, 783.99, 554.37, 830.61, 277.18, 261.63, 415.3, 523.25, 622.25, 415.3, 698.46, 349.23, 311.13, 415.3, 277.18, 392, 415.3, 311.13, 698.46, 622.25, 466.16, 311.13, 415.3, 261.63, 392, 415.3, 261.63, 392, 415.3, 261.63, 622.25, 622.25, 349.23, 554.37, 554.37, 523.25, 523.25, 277.18, 349.23, 466.16, 466.16, 277.18, 349.23, 415.3, 466.16, 311.13, 523.25, 523.25, 261.63, 415.3, 523.25, 622.25, 698.46, 415.3, 523.25, 261.63, 349.23, 261.63, 415.3, 392, 783.99, 783.99, 493.88, 698.46, 622.25, 392, 392, 311.13, 523.25, 554.37, 622.25, 466.16, 440, 261.63, 554.37, 349.23, 349.23, 523.25, 554.37, 415.3, 622.25, 277.18, 698.46, 783.99, 830.61, 1046.5, 554.37, 698.46, 932.33, 622.25, 830.61, 932.33, 932.33, 622.25, 1046.5, 1046.5, 622.25, 261.63, 622.25, 830.61, 932.33, 1046.5, 932.33, 622.25, 1244.51, 1244.51, 622.25, 311.13, 622.25, 392, 783.99, 311.13, 1244.51, 1396.91, 1567.98, 1567.98, 783.99, 1244.51, 1661.22, 1661.22, 830.61, 1864.66, 932.33, 2093, 1046.5, 1864.66, 932.33, 1661.22, 830.61, 783.99, 1567.98, 392, 261.63, 523.25, 311.13, 830.61, 1661.22, 261.63, 783.99, 1567.98, 311.13, 622.25, 1244.51, 622.25, 1244.51, 698.46, 1396.91, 698.46, 1396.91, 311.13, 349.23, 277.18, 415.3, 311.13, 1244.51, 1108.73, 1108.73, 622.25, 932.33, 1244.51, 1244.51, 622.25, 261.63, 311.13, 622.25, 261.63, 830.61, 932.33, 1046.5, 554.37, 1108.73, 1108.73, 277.18, 349.23, 1244.51, 1108.73, 1046.5, 554.37, 698.46, 932.33, 622.25, 830.61, 932.33, 932.33, 622.25, 1046.5, 1046.5, 622.25, 261.63, 622.25, 830.61, 932.33, 1046.5, 932.33, 622.25, 1244.51, 1244.51, 622.25, 311.13, 622.25, 392, 783.99, 311.13, 1244.51, 1396.91, 1567.98, 1567.98, 783.99, 1244.51, 1661.22, 1661.22, 830.61, 1864.66, 932.33, 2093, 1046.5, 1864.66, 932.33, 1661.22, 830.61, 783.99, 1567.98, 392, 261.63, 523.25, 311.13, 830.61, 1661.22, 261.63, 783.99, 1567.98, 311.13, 622.25, 1244.51, 622.25, 1244.51, 698.46, 1396.91, 698.46, 1396.91, 311.13, 349.23, 277.18, 415.3, 311.13, 1244.51, 1108.73, 1108.73, 622.25, 932.33, 1244.51, 1244.51, 622.25, 261.63, 311.13, 622.25, 261.63, 830.61, 932.33, 1046.5, 554.37, 1108.73, 698.46, 830.61, 554.37, 783.99, 554.37, 830.61, 277.18, 261.63, 415.3, 523.25, 622.25, 415.3, 783.99, 698.46, 311.13, 349.23, 277.18, 392, 415.3, 277.18, 698.46, 698.46, 466.16, 783.99, 622.25, 261.63, 311.13, 415.3, 261.63, 392, 415.3, 261.63, 622.25, 622.25, 349.23, 554.37, 554.37, 523.25, 523.25, 277.18, 349.23, 466.16, 466.16, 277.18, 349.23, 415.3, 466.16, 311.13, 523.25, 523.25, 261.63, 415.3, 523.25, 622.25, 698.46, 415.3, 261.63, 261.63, 349.23, 349.23, 392, 415.3, 311.13, 415.3, 392, 293.66, 783.99, 493.88, 392, 349.23, 392, 698.46, 698.46, 587.33, 392, 311.13, 622.25, 392, 523.25, 554.37, 622.25, 466.16, 440, 261.63, 554.37, 349.23, 349.23, 523.25, 554.37, 415.3, 622.25, 277.18, 698.46, 783.99, 830.61, 1046.5, 554.37, 698.46, 932.33, 622.25, 830.61, 932.33, 932.33, 622.25, 1046.5, 1046.5, 622.25, 261.63, 622.25, 830.61, 932.33, 1046.5, 932.33, 622.25, 1244.51, 1244.51, 622.25, 311.13, 622.25, 392, 783.99, 311.13, 1244.51, 1396.91, 1567.98, 1567.98, 783.99, 1244.51, 1661.22, 1661.22, 830.61, 1864.66, 932.33, 2093, 1046.5, 1864.66, 932.33, 1661.22, 830.61, 783.99, 1567.98, 392, 261.63, 523.25, 311.13, 830.61, 1661.22, 261.63, 783.99, 1567.98, 311.13, 622.25, 1244.51, 622.25, 1244.51, 698.46, 1396.91, 698.46, 1396.91, 311.13, 349.23, 277.18, 415.3, 311.13, 1244.51, 1108.73, 1108.73, 622.25, 932.33, 1244.51, 1244.51, 622.25, 261.63, 311.13, 622.25, 261.63, 830.61, 932.33, 1046.5, 554.37, 1108.73, 698.46, 830.61, 554.37, 783.99, 587.33, 880, 293.66, 369.99, 369.99, 415.3, 659.26, 880, 987.77, 987.77, 659.26, 1108.73, 329.63, 1108.73, 493.88, 329.63, 554.37, 440, 329.63, 659.26, 493.88, 880, 987.77, 1108.73, 987.77, 659.26, 277.18, 1318.51, 415.3, 1318.51, 830.61, 554.37, 415.3, 659.26, 659.26, 415.3, 830.61, 554.37, 1318.51, 1479.98, 1661.22, 1661.22, 1108.73, 369.99, 1760, 554.37, 1760, 1108.73, 830.61, 554.37, 880, 1975.53, 554.37, 1975.53, 1108.73, 830.61, 2217.46, 1975.53, 554.37, 1760, 1661.22, 1108.73, 329.63, 554.37, 830.61, 659.26, 554.37, 1108.73, 659.26, 880, 830.61, 659.26, 659.26, 440, 739.99, 739.99, 329.63, 369.99, 369.99, 440, 329.63, 659.26, 587.33, 587.33, 493.88, 659.26, 659.26, 329.63, 440, 277.18, 329.63, 440, 493.88, 554.37, 293.66, 587.33, 369.99, 440, 293.66, 415.3, 440, 293.66, 293.66, 277.18, 987.77, 1108.73, 1108.73, 587.33, 440, 1174.66, 369.99, 440, 739.99, 880, 587.33, 329.63, 493.88, 830.61, 880, 587.33, 329.63, 440, 277.18, 440, 880, 880, 1760];
	
	// A Thousand Years (Christina Perri) - MIDI-extracted notes (75 BPM)
	// Background notes (< C4 / 261.63Hz) - continuous ambient layer
	private readonly thousandYearsBass = [233.08, 233.08, 233.08, 220, 196, 196, 196, 174.61, 155.56, 155.56, 155.56, 233.08, 233.08, 174.61, 233.08, 77.78, 116.54, 155.56, 233.08, 155.56, 116.54, 233.08, 77.78, 116.54, 155.56, 116.54, 233.08, 233.08, 116.54, 146.83, 174.61, 233.08, 174.61, 146.83, 233.08, 116.54, 146.83, 174.61, 233.08, 98, 146.83, 196, 220, 87.31, 130.81, 233.08, 174.61, 196, 220, 233.08, 77.78, 116.54, 155.56, 233.08, 155.56, 116.54, 233.08, 77.78, 116.54, 155.56, 233.08, 233.08, 233.08, 116.54, 146.83, 174.61, 233.08, 174.61, 146.83, 233.08, 116.54, 146.83, 174.61, 233.08, 233.08, 98, 146.83, 196, 220, 87.31, 130.81, 233.08, 174.61, 196, 220, 196, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 98, 146.83, 196, 233.08, 196, 146.83, 87.31, 116.54, 146.83, 174.61, 233.08, 174.61, 146.83, 116.54, 174.61, 233.08, 110, 233.08, 174.61, 220, 98, 146.83, 196, 233.08, 196, 146.83, 98, 146.83, 196, 87.31, 233.08, 146.83, 233.08, 174.61, 233.08, 233.08, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 196, 77.78, 116.54, 233.08, 155.56, 233.08, 233.08, 233.08, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 174.61, 87.31, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 77.78, 233.08, 77.78, 116.54, 155.56, 233.08, 155.56, 116.54, 233.08, 77.78, 116.54, 155.56, 116.54, 233.08, 233.08, 116.54, 146.83, 174.61, 233.08, 174.61, 146.83, 233.08, 116.54, 146.83, 174.61, 233.08, 98, 146.83, 196, 220, 87.31, 130.81, 233.08, 174.61, 196, 220, 233.08, 77.78, 116.54, 155.56, 233.08, 155.56, 116.54, 233.08, 77.78, 116.54, 155.56, 233.08, 233.08, 233.08, 116.54, 146.83, 174.61, 233.08, 174.61, 146.83, 233.08, 116.54, 146.83, 174.61, 233.08, 233.08, 98, 146.83, 196, 220, 87.31, 130.81, 233.08, 174.61, 196, 220, 196, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 98, 146.83, 196, 233.08, 196, 146.83, 87.31, 116.54, 146.83, 174.61, 233.08, 174.61, 146.83, 116.54, 174.61, 233.08, 110, 233.08, 174.61, 220, 98, 146.83, 196, 233.08, 196, 146.83, 98, 146.83, 196, 87.31, 233.08, 146.83, 233.08, 174.61, 233.08, 233.08, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 196, 77.78, 116.54, 233.08, 155.56, 233.08, 233.08, 233.08, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 116.54, 146.83, 174.61, 233.08, 174.61, 146.83, 116.54, 174.61, 233.08, 110, 233.08, 174.61, 220, 98, 146.83, 196, 233.08, 196, 146.83, 98, 146.83, 196, 87.31, 233.08, 146.83, 233.08, 174.61, 233.08, 233.08, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 196, 77.78, 116.54, 233.08, 155.56, 233.08, 233.08, 233.08, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 116.54, 146.83, 174.61, 233.08, 174.61, 146.83, 116.54, 146.83, 174.61, 233.08, 174.61, 146.83, 98, 146.83, 196, 233.08, 196, 146.83, 98, 146.83, 196, 233.08, 196, 146.83, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 233.08, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 98, 146.83, 196, 233.08, 196, 146.83, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 98, 146.83, 196, 233.08, 196, 146.83, 87.31, 116.54, 146.83, 174.61, 233.08, 174.61, 146.83, 116.54, 174.61, 233.08, 110, 233.08, 174.61, 220, 98, 146.83, 196, 233.08, 196, 146.83, 98, 146.83, 196, 87.31, 233.08, 146.83, 233.08, 174.61, 233.08, 233.08, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 196, 77.78, 116.54, 233.08, 155.56, 233.08, 233.08, 233.08, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 116.54, 146.83, 174.61, 233.08, 174.61, 146.83, 116.54, 174.61, 233.08, 110, 233.08, 174.61, 220, 98, 146.83, 196, 233.08, 196, 146.83, 98, 146.83, 196, 87.31, 233.08, 146.83, 233.08, 174.61, 233.08, 233.08, 77.78, 116.54, 155.56, 196, 155.56, 116.54, 196, 77.78, 116.54, 233.08, 155.56, 233.08, 233.08, 233.08, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 77.78, 116.54, 155.56, 155.56, 116.54, 77.78, 116.54, 155.56, 155.56, 116.54, 233.08, 116.54, 146.83, 174.61, 174.61, 146.83, 116.54, 146.83, 174.61, 174.61, 146.83, 233.08, 116.54, 146.83, 155.56, 155.56, 116.54, 77.78, 116.54, 155.56, 155.56, 116.54, 233.08, 98, 146.83, 196, 196, 146.83, 87.31, 130.81, 174.61, 220, 174.61, 130.81, 174.61, 233.08, 116.54, 233.08];
	// Melody notes (>= C4 / 261.63Hz) - keystroke/mouse triggered
	private readonly thousandYearsMelody = [349.23, 466.16, 587.33, 349.23, 466.16, 587.33, 349.23, 466.16, 587.33, 349.23, 523.25, 392, 466.16, 587.33, 392, 466.16, 587.33, 392, 466.16, 587.33, 392, 523.25, 392, 466.16, 622.25, 392, 466.16, 622.25, 392, 466.16, 622.25, 466.16, 349.23, 466.16, 587.33, 349.23, 466.16, 587.33, 349.23, 440, 523.25, 466.16, 440, 349.23, 293.66, 261.63, 349.23, 311.13, 293.66, 349.23, 311.13, 293.66, 293.66, 261.63, 349.23, 311.13, 293.66, 349.23, 311.13, 293.66, 311.13, 392, 349.23, 440, 392, 466.16, 349.23, 440, 293.66, 349.23, 293.66, 293.66, 349.23, 293.66, 392, 349.23, 293.66, 293.66, 349.23, 293.66, 293.66, 349.23, 293.66, 392, 349.23, 293.66, 311.13, 293.66, 261.63, 261.63, 311.13, 293.66, 466.16, 440, 349.23, 293.66, 261.63, 349.23, 311.13, 293.66, 349.23, 311.13, 293.66, 293.66, 261.63, 349.23, 311.13, 293.66, 349.23, 311.13, 293.66, 311.13, 392, 349.23, 440, 392, 466.16, 349.23, 440, 293.66, 349.23, 293.66, 293.66, 349.23, 293.66, 392, 349.23, 293.66, 293.66, 349.23, 293.66, 293.66, 349.23, 293.66, 392, 349.23, 293.66, 311.13, 293.66, 261.63, 261.63, 311.13, 293.66, 261.63, 293.66, 293.66, 349.23, 293.66, 293.66, 349.23, 293.66, 293.66, 392, 349.23, 293.66, 293.66, 349.23, 293.66, 293.66, 293.66, 349.23, 293.66, 293.66, 392, 349.23, 293.66, 311.13, 293.66, 261.63, 261.63, 311.13, 293.66, 349.23, 466.16, 932.33, 440, 880, 349.23, 698.46, 293.66, 587.33, 466.16, 932.33, 440, 880, 293.66, 587.33, 311.13, 622.25, 523.25, 1046.5, 466.16, 932.33, 349.23, 698.46, 311.13, 622.25, 587.33, 1174.66, 523.25, 1046.5, 311.13, 622.25, 261.63, 293.66, 261.63, 311.13, 392, 349.23, 440, 392, 466.16, 349.23, 440, 523.25, 293.66, 349.23, 293.66, 293.66, 349.23, 293.66, 392, 349.23, 293.66, 293.66, 349.23, 293.66, 293.66, 349.23, 293.66, 392, 349.23, 293.66, 311.13, 293.66, 261.63, 261.63, 311.13, 293.66, 261.63, 293.66, 293.66, 349.23, 293.66, 293.66, 349.23, 293.66, 392, 349.23, 293.66, 293.66, 349.23, 293.66, 293.66, 293.66, 349.23, 293.66, 392, 349.23, 293.66, 311.13, 293.66, 261.63, 261.63, 311.13, 293.66, 261.63, 311.13, 293.66, 261.63, 349.23, 311.13, 293.66, 311.13, 293.66, 261.63, 293.66, 261.63];
	
	// River Flows In You (Yiruma) - MIDI-extracted notes (65 BPM)
	// Background notes (< C4 / 261.63Hz) - continuous ambient layer
	private readonly riverFlowsBass = [185, 146.83, 220, 185, 146.83, 220, 185, 146.83, 220, 146.83, 110, 164.81, 164.81, 246.94, 185, 146.83, 220, 110, 164.81, 164.81, 246.94, 185, 146.83, 220, 146.83, 110, 164.81, 110, 164.81, 246.94, 185, 146.83, 246.94, 110, 164.81, 164.81, 246.94, 185, 185, 146.83, 220, 146.83, 110, 164.81, 110, 164.81, 246.94, 164.81, 185, 185, 146.83, 246.94, 146.83, 110, 164.81, 110, 164.81, 246.94, 164.81, 92.5, 138.59, 185, 92.5, 146.83, 220, 146.83, 110, 164.81, 110, 82.41, 123.47, 207.65, 82.41, 92.5, 138.59, 185, 92.5, 146.83, 220, 146.83, 110, 164.81, 110, 82.41, 123.47, 207.65, 185, 146.83, 220, 146.83, 110, 164.81, 110, 164.81, 246.94, 185, 146.83, 220, 110, 164.81, 110, 164.81, 246.94, 185, 185, 146.83, 220, 146.83, 110, 164.81, 110, 164.81, 246.94, 164.81, 185, 146.83, 220, 146.83, 110, 164.81, 110, 82.41, 123.47, 207.65, 82.41, 92.5, 138.59, 185, 146.83, 220, 146.83, 110, 164.81, 110, 82.41, 123.47, 207.65, 82.41, 92.5, 138.59, 185, 146.83, 220, 146.83, 110, 164.81, 110, 82.41, 123.47, 207.65, 82.41, 92.5, 138.59, 185, 146.83, 220, 146.83, 110, 164.81, 110, 82.41, 123.47, 207.65, 82.41, 92.5, 138.59, 185, 146.83, 220, 146.83, 110, 164.81, 110, 82.41, 123.47, 207.65, 185, 164.81, 164.81, 164.81, 220, 92.5, 138.59, 146.83, 220, 110, 164.81, 164.81, 246.94, 185, 146.83, 220, 146.83, 110, 164.81, 164.81, 246.94, 92.5, 138.59, 185, 146.83, 220, 110, 164.81, 82.41, 123.47, 207.65, 92.5, 220, 138.59, 185];
	// Melody notes (>= C4 / 261.63Hz) - keystroke/mouse triggered
	private readonly riverFlowsMelody = [880, 830.61, 277.18, 880, 369.99, 830.61, 880, 659.26, 880, 329.63, 587.33, 440, 554.37, 880, 830.61, 277.18, 880, 369.99, 830.61, 880, 659.26, 880, 329.63, 587.33, 440, 554.37, 880, 830.61, 277.18, 880, 369.99, 440, 830.61, 880, 440, 659.26, 880, 329.63, 440, 587.33, 440, 493.88, 554.37, 587.33, 440, 659.26, 277.18, 554.37, 415.3, 493.88, 329.63, 440, 415.3, 440, 277.18, 369.99, 329.63, 440, 493.88, 554.37, 329.63, 554.37, 587.33, 659.26, 277.18, 587.33, 554.37, 493.88, 415.3, 440, 554.37, 880, 830.61, 277.18, 880, 369.99, 440, 830.61, 880, 440, 659.26, 880, 329.63, 440, 587.33, 440, 493.88, 554.37, 587.33, 659.26, 277.18, 1108.73, 987.77, 659.26, 987.77, 329.63, 1108.73, 987.77, 880, 830.61, 659.26, 880, 277.18, 369.99, 440, 493.88, 554.37, 329.63, 440, 329.63, 554.37, 587.33, 659.26, 329.63, 554.37, 277.18, 587.33, 554.37, 493.88, 880, 329.63, 987.77, 880, 830.61, 880, 440, 659.26, 277.18, 440, 880, 369.99, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 329.63, 987.77, 880, 830.61, 880, 987.77, 1108.73, 1174.66, 1318.51, 277.18, 1108.73, 987.77, 880, 830.61, 493.88, 880, 329.63, 987.77, 880, 830.61, 880, 440, 659.26, 277.18, 440, 880, 329.63, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 329.63, 987.77, 880, 830.61, 880, 987.77, 1108.73, 1174.66, 1318.51, 277.18, 1108.73, 987.77, 880, 830.61, 493.88, 880, 329.63, 880, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 880, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 277.18, 880, 987.77, 880, 830.61, 880, 987.77, 1108.73, 1174.66, 1318.51, 277.18, 1108.73, 987.77, 880, 830.61, 493.88, 880, 880, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 880, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 329.63, 987.77, 880, 830.61, 880, 987.77, 1108.73, 1174.66, 1318.51, 277.18, 1108.73, 987.77, 880, 830.61, 493.88, 415.3, 329.63, 440, 554.37, 880, 830.61, 277.18, 880, 369.99, 440, 830.61, 880, 440, 830.61, 880, 329.63, 440, 587.33, 440, 493.88, 554.37, 587.33, 440, 659.26, 277.18, 554.37, 415.3, 493.88, 329.63, 440, 415.3, 329.63, 440, 277.18, 329.63, 440, 329.63, 440, 493.88, 554.37, 329.63, 440, 493.88, 554.37, 293.66, 329.63, 554.37, 587.33, 659.26, 329.63, 554.37, 587.33, 659.26, 277.18, 329.63, 587.33, 554.37, 493.88, 329.63, 587.33, 554.37, 493.88, 329.63, 415.3, 554.37, 880, 830.61, 277.18, 880, 369.99, 440, 830.61, 880, 440, 659.26, 880, 329.63, 440, 587.33, 440, 493.88, 554.37, 587.33, 659.26, 277.18, 1108.73, 987.77, 659.26, 659.26, 329.63, 1108.73, 987.77, 880, 830.61, 659.26, 880, 277.18, 369.99, 440, 493.88, 554.37, 329.63, 440, 493.88, 554.37, 293.66, 329.63, 554.37, 587.33, 659.26, 329.63, 554.37, 587.33, 659.26, 277.18, 329.63, 587.33, 554.37, 493.88, 329.63, 415.3, 493.88, 880, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 369.99, 880, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 329.63, 880, 987.77, 880, 830.61, 880, 987.77, 1108.73, 1174.66, 1318.51, 277.18, 1108.73, 987.77, 1108.73, 987.77, 880, 830.61, 440, 659.26, 440, 880, 880, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 369.99, 880, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 329.63, 880, 987.77, 880, 830.61, 880, 987.77, 1108.73, 1174.66, 1318.51, 277.18, 1108.73, 987.77, 1108.73, 987.77, 880, 830.61, 440, 659.26, 440, 880, 880, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 369.99, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 329.63, 880, 987.77, 880, 830.61, 880, 987.77, 1108.73, 1174.66, 1318.51, 277.18, 1108.73, 987.77, 880, 830.61, 493.88, 880, 880, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 369.99, 880, 987.77, 880, 830.61, 880, 440, 659.26, 440, 880, 329.63, 880, 987.77, 880, 830.61, 880, 987.77, 1108.73, 1174.66, 1318.51, 277.18, 1108.73, 987.77, 880, 830.61, 493.88, 415.3, 329.63, 440, 277.18, 554.37, 880, 830.61, 880, 830.61, 440, 554.37, 880, 659.26, 293.66, 880, 369.99, 587.33, 440, 554.37, 587.33, 277.18, 440, 659.26, 554.37, 493.88, 329.63, 415.3, 440, 415.3, 277.18, 329.63, 440, 329.63, 440, 493.88, 554.37, 329.63, 440, 329.63, 554.37, 587.33, 659.26, 329.63, 554.37, 277.18, 587.33, 554.37, 493.88, 329.63, 440, 554.37, 880, 830.61, 277.18, 880, 369.99, 830.61, 440, 659.26, 880, 659.26, 880, 329.63, 587.33, 493.88, 554.37, 587.33, 659.26, 277.18, 1108.73, 659.26, 987.77, 415.3, 440, 329.63, 440, 440, 493.88, 554.37, 329.63, 440, 293.66, 554.37, 587.33, 659.26, 329.63, 440, 277.18, 587.33, 554.37, 493.88, 329.63, 440, 277.18, 369.99, 440, 880, 277.18];

	// --- Demon Slayer - Gurenge (135 BPM) ---
	// Background notes (< C4 / 261.63Hz) - continuous bass rhythm
	private readonly gurengeBass = [130.81,196,130.81,146.83,220,146.83,164.81,246.94,164.81,146.83,220,65.41,130.81,130.81,196,246.94,146.83,220,82.41,164.81,73.42,146.83,82.41,164.81,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,246.94,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,246.94,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,246.94,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,73.42,146.83,220,73.42,146.83,220,82.41,164.81,164.81,246.94,164.81,73.42,146.83,220,220,146.83,65.41,130.81,130.81,196,246.94,164.81,73.42,146.83,220,185,146.83,196,185,196,220,82.41,164.81,164.81,246.94,164.81,73.42,146.83,220,220,146.83,65.41,130.81,196,164.81,73.42,146.83,220,220,146.83,82.41,164.81,164.81,246.94,164.81,73.42,146.83,220,220,146.83,65.41,130.81,130.81,196,130.81,73.42,146.83,220,220,220,82.41,164.81,164.81,246.94,164.81,73.42,146.83,220,220,146.83,65.41,130.81,130.81,196,130.81,196,73.42,146.83,220,220,146.83,185,220,130.81,196,130.81,146.83,220,146.83,164.81,246.94,164.81,146.83,220,65.41,130.81,65.41,130.81,65.41,130.81,65.41,130.81,73.42,146.83,73.42,146.83,73.42,146.83,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,82.41,164.81,246.94,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,164.81,123.47,98,123.47,82.41,164.81,65.41,82.41,98,130.81,196,130.81,196,164.81,130.81,196,164.81,130.81,73.42,92.5,110,146.83,220,146.83,220,185,146.83,220,185,146.83,82.41,98,123.47,164.81,246.94,164.81,246.94,196,164.81,246.94,196,164.81,73.42,92.5,110,146.83,220,146.83,220,185,146.83,220,185,146.83,65.41,82.41,98,130.81,196,130.81,196,164.81,130.81,196,164.81,130.81,61.74,77.78,92.5,123.47,185,246.94,123.47,246.94,185,155.56,123.47,246.94,185,155.56,123.47,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,82.41,164.81,220,220,73.42,146.83,82.41,164.81,73.42,146.83,82.41,164.81,82.41,164.81,65.41,82.41,98,130.81,196,130.81,196,164.81,130.81,196,164.81,130.81,73.42,92.5,110,146.83,220,146.83,220,185,146.83,220,185,146.83,61.74,77.78,92.5,123.47,185,246.94,123.47,246.94,185,155.56,123.47,246.94,185,155.56,123.47,82.41,98,123.47,164.81,246.94,164.81,246.94,196,164.81,246.94,196,164.81,65.41,82.41,98,130.81,196,130.81,196,164.81,130.81,196,164.81,130.81,146.83,220,220,220,246.94,82.41,164.81,73.42,146.83,82.41,164.81,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,246.94,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,246.94,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,246.94,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,73.42,146.83,220,73.42,146.83,220,82.41,164.81,164.81,246.94,164.81,246.94,73.42,146.83,220,220,146.83,220,65.41,130.81,130.81,196,246.94,130.81,196,246.94,73.42,146.83,220,185,146.83,196,185,196,220,82.41,164.81,164.81,246.94,164.81,246.94,73.42,146.83,220,220,146.83,220,65.41,130.81,130.81,196,246.94,130.81,196,246.94,73.42,146.83,220,220,73.42,110,146.83,82.41,164.81,164.81,246.94,164.81,246.94,246.94,164.81,82.41,164.81,164.81,246.94,164.81,246.94,246.94,164.81,82.41,164.81,164.81,246.94,164.81,246.94,246.94,164.81,65.41,130.81,130.81,196,130.81,196,220,146.83,82.41,164.81,164.81,246.94,164.81,246.94,246.94,164.81,82.41,164.81,164.81,246.94,164.81,246.94,220,146.83,82.41,164.81,82.41,123.47,164.81,82.41,123.47,164.81,82.41,123.47,164.81,82.41,82.41,164.81,82.41,164.81,65.41,82.41,98,130.81,196,130.81,196,164.81,130.81,196,164.81,130.81,73.42,92.5,110,146.83,220,146.83,220,185,146.83,220,185,146.83,82.41,98,123.47,164.81,246.94,164.81,246.94,196,164.81,246.94,196,164.81,73.42,92.5,110,146.83,220,146.83,220,185,146.83,220,185,146.83,65.41,82.41,98,130.81,196,130.81,196,164.81,130.81,196,164.81,130.81,61.74,77.78,92.5,123.47,185,246.94,123.47,246.94,185,155.56,123.47,246.94,185,155.56,123.47,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,82.41,164.81,220,220,73.42,146.83,82.41,164.81,73.42,146.83,82.41,164.81,82.41,164.81,65.41,82.41,98,130.81,196,130.81,196,164.81,130.81,196,164.81,130.81,73.42,92.5,110,146.83,220,146.83,220,185,146.83,220,185,146.83,61.74,77.78,92.5,123.47,185,246.94,123.47,246.94,185,155.56,123.47,246.94,185,155.56,123.47,82.41,98,123.47,164.81,246.94,164.81,246.94,196,164.81,246.94,196,164.81,65.41,82.41,98,130.81,196,130.81,196,164.81,130.81,196,164.81,130.81,146.83,220,65.41,130.81,246.94,73.42,146.83,220,82.41,164.81,246.94,73.42,146.83,220,65.41,130.81,246.94,73.42,146.83,220,82.41,164.81,246.94,73.42,146.83,220,65.41,130.81,246.94,73.42,146.83,220,82.41,164.81,246.94,73.42,146.83,220,65.41,130.81,246.94,73.42,146.83,220,82.41,164.81,246.94,73.42,146.83,220,65.41,130.81,246.94,130.81,196,73.42,146.83,220,146.83,220,82.41,164.81,246.94,164.81,246.94,73.42,146.83,220,65.41,130.81,65.41,130.81,65.41,130.81,65.41,130.81,73.42,146.83,73.42,146.83,73.42,146.83,73.42,146.83,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,82.41,164.81,65.41,130.81,65.41,130.81,65.41,130.81,130.81,196,73.42,146.83,146.83,220,73.42,110,146.83,73.42,82.41,164.81,164.81,246.94,82.41,123.47,164.81,82.41,73.42,146.83,146.83,220,73.42,110,146.83,73.42,65.41,130.81,130.81,196,65.41,98,130.81,65.41,61.74,123.47,123.47,185,246.94,61.74,92.5,123.47,61.74,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,82.41,164.81,220,220,73.42,146.83,82.41,164.81,73.42,146.83,82.41,164.81,82.41,164.81,65.41,82.41,98,130.81,196,130.81,196,164.81,130.81,196,164.81,130.81,73.42,92.5,110,146.83,220,146.83,220,185,146.83,220,185,146.83,61.74,77.78,92.5,123.47,185,246.94,123.47,246.94,185,155.56,123.47,246.94,185,155.56,123.47,82.41,98,123.47,164.81,246.94,164.81,246.94,196,164.81,246.94,196,164.81,65.41,82.41,98,130.81,196,130.81,65.41,130.81,65.41,130.81,65.41,130.81,65.41,130.81,73.42,92.5,110,146.83,220,146.83,220,185,146.83,220,185,146.83,65.41,82.41,98,130.81,196,130.81,196,164.81,130.81,196,164.81,130.81,73.42,92.5,110,146.83,220,146.83,220,185,146.83,220,185,146.83,82.41,98,123.47,164.81,246.94,164.81,246.94,196,164.81,246.94,196,164.81,73.42,92.5,110,146.83,220,146.83,220,185,146.83,220,185,146.83,65.41,82.41,98,130.81,196,130.81,65.41,130.81,196,164.81,130.81,73.42,146.83,246.94,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,246.94,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,246.94,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94,246.94,82.41,164.81,220,73.42,146.83,246.94,82.41,164.81,246.94,73.42,146.83,82.41,164.81,246.94,82.41,164.81,246.94];
	// Melody notes (>= C4 / 261.63Hz) - keystroke/mouse triggered
	private readonly gurengeMelody = [783.99,523.25,659.26,261.63,739.99,783.99,261.63,329.63,783.99,440,587.33,293.66,739.99,783.99,293.66,369.99,493.88,783.99,392,493.88,739.99,493.88,659.26,329.63,392,440,587.33,293.66,293.66,369.99,493.88,392,369.99,587.33,293.66,329.63,523.25,659.26,523.25,659.26,783.99,587.33,739.99,880,293.66,493.88,659.26,783.99,880,493.88,659.26,987.77,329.63,493.88,329.63,493.88,329.63,293.66,329.63,329.63,493.88,329.63,493.88,329.63,293.66,329.63,329.63,493.88,329.63,493.88,329.63,293.66,329.63,293.66,440,293.66,440,659.26,392,493.88,783.99,739.99,329.63,587.33,659.26,369.99,440,587.33,293.66,392,329.63,440,329.63,440,392,329.63,440,440,523.25,392,493.88,329.63,293.66,293.66,392,440,369.99,493.88,440,369.99,493.88,440,587.33,659.26,392,493.88,783.99,739.99,329.63,587.33,659.26,369.99,440,587.33,587.33,293.66,392,783.99,987.77,739.99,880,783.99,987.77,739.99,880,783.99,987.77,880,1046.5,783.99,987.77,523.25,783.99,261.63,329.63,783.99,440,587.33,739.99,440,587.33,739.99,440,587.33,783.99,293.66,392,587.33,880,783.99,493.88,659.26,880,659.26,783.99,493.88,659.26,329.63,783.99,987.77,739.99,880,369.99,440,369.99,440,369.99,440,293.66,392,392,369.99,440,493.88,392,783.99,493.88,659.26,880,659.26,783.99,493.88,659.26,261.63,783.99,659.26,1174.66,440,440,440,293.66,392,392,440,369.99,392,293.66,392,783.99,493.88,659.26,880,659.26,783.99,493.88,659.26,329.63,783.99,987.77,739.99,880,739.99,880,587.33,739.99,987.77,293.66,392,587.33,739.99,987.77,1174.66,987.77,523.25,659.26,880,523.25,659.26,783.99,261.63,783.99,261.63,440,587.33,739.99,440,587.33,739.99,440,587.33,783.99,293.66,392,440,587.33,880,293.66,369.99,440,587.33,739.99,783.99,523.25,659.26,261.63,739.99,783.99,261.63,329.63,783.99,440,587.33,293.66,739.99,783.99,293.66,369.99,493.88,783.99,392,493.88,739.99,493.88,659.26,329.63,392,440,587.33,293.66,293.66,369.99,493.88,392,369.99,587.33,293.66,329.63,523.25,659.26,523.25,659.26,783.99,587.33,739.99,880,493.88,659.26,783.99,880,493.88,659.26,987.77,329.63,329.63,329.63,329.63,659.26,369.99,739.99,392,783.99,440,880,293.66,392,587.33,293.66,392,587.33,493.88,659.26,987.77,440,523.25,659.26,880,493.88,987.77,587.33,1174.66,261.63,493.88,987.77,440,880,261.63,493.88,987.77,493.88,987.77,261.63,392,783.99,440,587.33,739.99,880,493.88,987.77,587.33,1174.66,293.66,493.88,987.77,440,880,293.66,493.88,987.77,493.88,987.77,293.66,293.66,587.33,329.63,392,493.88,659.26,392,783.99,392,783.99,329.63,293.66,587.33,293.66,587.33,329.63,392,783.99,440,880,329.63,392,783.99,587.33,739.99,880,1174.66,523.25,739.99,880,1046.5,293.66,493.88,739.99,987.77,293.66,440,880,293.66,392,783.99,392,523.25,659.26,783.99,261.63,392,783.99,261.63,440,880,493.88,987.77,261.63,440,622.25,739.99,880,369.99,739.99,440,880,493.88,987.77,587.33,1174.66,493.88,659.26,783.99,987.77,293.66,329.63,329.63,493.88,329.63,493.88,293.66,440,293.66,440,293.66,392,587.33,293.66,392,587.33,493.88,659.26,987.77,440,523.25,659.26,880,493.88,987.77,587.33,1174.66,261.63,493.88,987.77,440,880,261.63,493.88,987.77,493.88,987.77,261.63,392,783.99,440,587.33,739.99,880,493.88,987.77,587.33,1174.66,293.66,493.88,987.77,440,880,293.66,493.88,987.77,392,783.99,293.66,392,783.99,392,493.88,622.25,783.99,440,880,493.88,739.99,987.77,493.88,987.77,783.99,1567.98,739.99,987.77,1479.98,587.33,987.77,1174.66,329.63,493.88,659.26,987.77,329.63,440,659.26,880,329.63,392,783.99,392,523.25,659.26,783.99,261.63,392,783.99,261.63,440,880,493.88,987.77,261.63,440,880,293.66,293.66,293.66,329.63,329.63,493.88,329.63,493.88,329.63,293.66,329.63,329.63,493.88,329.63,493.88,329.63,293.66,329.63,329.63,493.88,329.63,493.88,329.63,293.66,329.63,293.66,440,293.66,440,659.26,392,493.88,783.99,739.99,329.63,587.33,659.26,369.99,440,587.33,329.63,293.66,392,329.63,440,329.63,440,392,329.63,440,440,523.25,293.66,392,493.88,329.63,293.66,293.66,392,440,369.99,493.88,440,369.99,493.88,440,587.33,659.26,392,493.88,783.99,739.99,329.63,587.33,659.26,369.99,440,587.33,329.63,587.33,293.66,392,783.99,987.77,739.99,880,783.99,987.77,739.99,880,783.99,987.77,880,1046.5,293.66,783.99,987.77,523.25,783.99,783.99,440,587.33,739.99,440,587.33,739.99,440,587.33,783.99,293.66,392,587.33,880,493.88,659.26,987.77,659.26,880,783.99,329.63,659.26,880,659.26,880,329.63,880,659.26,880,659.26,880,880,659.26,880,329.63,783.99,659.26,659.26,880,783.99,329.63,659.26,880,659.26,880,329.63,880,659.26,880,659.26,880,987.77,880,329.63,783.99,1174.66,1174.66,329.63,659.26,1174.66,1046.5,329.63,987.77,659.26,1046.5,987.77,880,659.26,987.77,329.63,880,783.99,392,493.88,659.26,261.63,493.88,659.26,783.99,261.63,493.88,659.26,880,493.88,659.26,987.77,293.66,659.26,880,783.99,329.63,659.26,880,659.26,880,329.63,783.99,739.99,659.26,329.63,587.33,659.26,880,783.99,329.63,659.26,880,659.26,880,329.63,880,659.26,880,1046.5,493.88,659.26,987.77,293.66,587.33,493.88,659.26,987.77,523.25,1046.5,493.88,659.26,987.77,523.25,1046.5,493.88,659.26,987.77,293.66,392,587.33,293.66,392,587.33,493.88,659.26,987.77,440,523.25,659.26,880,493.88,987.77,587.33,1174.66,261.63,493.88,987.77,440,880,261.63,493.88,987.77,493.88,987.77,261.63,392,783.99,440,587.33,739.99,880,493.88,987.77,587.33,1174.66,293.66,493.88,987.77,440,880,293.66,493.88,987.77,493.88,987.77,293.66,293.66,587.33,329.63,392,493.88,659.26,392,783.99,392,783.99,329.63,293.66,587.33,293.66,587.33,329.63,392,783.99,440,880,329.63,392,783.99,587.33,739.99,880,1174.66,523.25,739.99,880,1046.5,293.66,493.88,739.99,987.77,293.66,440,880,293.66,392,783.99,392,523.25,659.26,783.99,261.63,392,783.99,261.63,440,880,493.88,987.77,261.63,440,622.25,739.99,880,369.99,739.99,440,880,493.88,987.77,587.33,1174.66,493.88,659.26,783.99,987.77,293.66,329.63,329.63,493.88,329.63,493.88,293.66,440,293.66,440,293.66,392,587.33,293.66,392,587.33,493.88,659.26,987.77,440,523.25,659.26,880,493.88,987.77,587.33,1174.66,261.63,493.88,987.77,440,880,261.63,493.88,987.77,493.88,987.77,261.63,392,783.99,440,587.33,739.99,880,493.88,987.77,587.33,1174.66,293.66,493.88,987.77,440,880,293.66,493.88,987.77,392,783.99,293.66,392,783.99,392,493.88,622.25,783.99,440,880,493.88,739.99,987.77,493.88,987.77,783.99,1567.98,739.99,987.77,1479.98,587.33,987.77,1174.66,329.63,493.88,659.26,987.77,329.63,440,659.26,880,329.63,392,783.99,392,523.25,659.26,783.99,261.63,392,783.99,440,880,493.88,987.77,440,880,293.66,440,587.33,880,440,587.33,880,293.66,493.88,659.26,987.77,293.66,261.63,261.63,392,523.25,261.63,261.63,392,523.25,261.63,392,329.63,261.63,293.66,293.66,293.66,440,587.33,293.66,293.66,440,587.33,293.66,440,369.99,293.66,329.63,329.63,329.63,493.88,659.26,329.63,329.63,493.88,659.26,329.63,493.88,392,329.63,293.66,293.66,293.66,440,587.33,293.66,293.66,440,587.33,293.66,440,369.99,293.66,261.63,261.63,261.63,392,523.25,783.99,440,880,493.88,987.77,261.63,440,587.33,739.99,880,440,587.33,440,587.33,493.88,659.26,329.63,293.66,329.63,329.63,493.88,329.63,493.88,329.63,293.66,329.63,329.63,493.88,329.63,493.88,329.63,293.66,329.63,329.63,493.88,329.63,493.88,329.63,293.66,329.63,329.63,493.88,329.63,493.88];
	
	private midiBassIndex = 0; // Track position in MIDI bass sequence
	private midiMelodyIndex = 0; // Track position in MIDI melody sequence
	private midiBassInterval: NodeJS.Timeout | null = null; // MIDI bass timer

	// C Minor Pentatonic Scale - Extended across 2.5 octaves (15 notes)
	// Scale degrees: C, Eb, F, G, Bb (1, b3, 4, 5, b7)
	private readonly pentatonicScale = [
		131, // C3
		156, // Eb3
		175, // F3
		196, // G3
		233, // Bb3
		262, // C4
		311, // Eb4
		349, // F4
		392, // G4
		466, // Bb4
		523, // C5
		622, // Eb5
		698, // F5
		784, // G5
		932, // Bb5
	];

	// Original melodic piano ballad (inspired by emotional piano pieces)
	// 32-note melody in C minor, slow and expressive
	private readonly melodySequence = [
		523, // C5
		622, // Eb5
		698, // F5
		784, // G5
		698, // F5
		622, // Eb5
		523, // C5
		466, // Bb4
		
		392, // G4
		466, // Bb4
		523, // C5
		622, // Eb5
		523, // C5
		466, // Bb4
		392, // G4
		349, // F4
		
		523, // C5
		622, // Eb5
		698, // F5
		784, // G5
		932, // Bb5
		784, // G5
		698, // F5
		622, // Eb5
		
		523, // C5
		466, // Bb4
		392, // G4
		349, // F4
		392, // G4
		466, // Bb4
		523, // C5
		523, // C5 (resolution)
	];

	// Jazz chord progression (ii-V-I in Bb major, classic jazz turnaround)
	// Each chord represented as [root, third, fifth, seventh]
	private readonly jazzChordProgression = [
		{ name: 'Cm7', notes: [262, 311, 392, 466] },      // Cm7 (ii)
		{ name: 'F7', notes: [175, 220, 262, 311] },       // F7 (V)
		{ name: 'BbMaj7', notes: [233, 294, 349, 440] },   // BbMaj7 (I)
		{ name: 'Gm7', notes: [196, 233, 294, 349] },      // Gm7 (vi) - adds movement
	];

	// Scale notes that fit each jazz chord (for keystroke harmonization)
	// Extended to 2 octaves for more variety
	private readonly jazzChordScales = {
		'Cm7': [131, 147, 156, 175, 196, 220, 233, 262, 294, 311, 349, 392, 440, 466, 523],     // C Dorian (2 octaves)
		'F7': [87, 98, 110, 123, 131, 147, 156, 175, 196, 220, 247, 262, 294, 311, 349],        // F Mixolydian (2 octaves)
		'BbMaj7': [117, 131, 147, 156, 175, 196, 220, 233, 262, 294, 311, 349, 392, 440, 466],  // Bb Major (2 octaves)
		'Gm7': [98, 110, 117, 131, 147, 165, 175, 196, 220, 233, 262, 294, 330, 349, 392],      // G Dorian (2 octaves)
	};

	constructor() {
		this.ctx = getAudioContext();
		this.masterGain = this.ctx.createGain();
		this.masterGain.connect(this.ctx.destination);
		this.masterGain.gain.setValueAtTime(0, this.ctx.currentTime);
		console.log('[AudioEngine] Constructor - AudioContext state:', this.ctx.state);
		console.log('[AudioEngine] Constructor - Master gain connected to destination');
	}

	/**
	 * Start playing ambient music for the selected mood
	 */
	async start(mood: Mood): Promise<void> {
		if (this.isPlaying) {
			console.log('[AudioEngine] Already playing, stopping first');
			this.stop();
		}

		console.log('[AudioEngine] Start called - AudioContext state:', this.ctx.state);
		
		// Resume AudioContext if suspended (browser autoplay policy)
		if (this.ctx.state === 'suspended') {
			console.log('[AudioEngine] Resuming suspended AudioContext...');
			await this.ctx.resume();
			console.log('[AudioEngine] AudioContext resumed, state:', this.ctx.state);
		}
		
		// Ensure masterGain is connected to destination
		try {
			this.masterGain.disconnect();
		} catch (e) {
			// masterGain not connected yet (first run)
		}
		this.masterGain.connect(this.ctx.destination);

		const config = MOOD_CONFIGS[mood];
		this.currentMood = mood;
		this.isPlaying = true;
		
		console.log('[AudioEngine] Config for mood:', mood, config);

		// For melodic-flow mood, skip the lofi beat and vinyl noise
		// Only play melody notes triggered by keystrokes
		if (mood === 'melodic-flow') {
			console.log('[AudioEngine] Melodic-flow mode: No background beats, melody-only');
		} else if (mood === 'jazz-harmony') {
			// For jazz-harmony mood, play jazz chord progression (no drums)
			console.log('[AudioEngine] Jazz-harmony mode: Chord progression with harmonized keystrokes');
			this.startJazzProgression(config.tempo);
		} else if (mood === 'thousand-years' || mood === 'kiss-the-rain' || mood === 'river-flows' || mood === 'gurenge') {
			// For MIDI moods, play background bass notes (< C4)
			// Melody notes (>= C4) triggered by keystrokes
			console.log(`[AudioEngine] ${mood} mode: MIDI bass background + keystroke melody`);
			this.startMidiBass(mood, config.tempo);
		} else {
			// Create lofi hip-hop beat elements for other moods
			this.createLofiBeat(config);
			
			// Start vinyl crackle noise
			this.startVinylNoise();
		}

		// Fade in master gain
		const now = this.ctx.currentTime;
		this.masterGain.gain.cancelScheduledValues(now);
		this.masterGain.gain.setValueAtTime(0, now);
		this.masterGain.gain.linearRampToValueAtTime(
			config.volume,
			now + 1, // 1 second fade-in
		);

		console.log(`[AudioEngine] ✅ Started lofi beat for mood: ${mood}`);
		console.log(`[AudioEngine] AudioContext state: ${this.ctx.state}`);
	}

	/**
	 * Create lofi hip-hop beat with drums only (no continuous chords/bass)
	 * @private
	 */
	private createLofiBeat(config: AudioConfig): void {
		// Start the drum loop
		this.startDrumLoop(config.tempo);
		
		// NOTE: Removed continuous jazz chords and bass line per user request
		// Only keeping drums + vinyl crackle for clean lofi vibe
	}

	/**
	 * Start lofi drum loop (kick, snare, hi-hat)
	 * @private
	 */
	private startDrumLoop(tempo: number): void {
		const beatDuration = 60 / tempo; // seconds per beat
		let beatCount = 0;

		const playBeat = () => {
			const now = this.ctx.currentTime;
			
			// Kick drum on beats 1 and 3 (4/4 time)
			if (beatCount % 4 === 0 || beatCount % 4 === 2) {
				this.playKick(now);
			}
			
			// Snare on beats 2 and 4
			if (beatCount % 4 === 1 || beatCount % 4 === 3) {
				this.playSnare(now);
			}
			
			// Hi-hat on every beat
			this.playHiHat(now);
			
			beatCount++;
		};

		// Start immediately
		playBeat();
		
		// Schedule recurring beats
		this.drumLoopInterval = setInterval(playBeat, beatDuration * 1000);
	}

	/**
	 * Play kick drum sound
	 * @private
	 */
	private playKick(startTime: number): void {
		const osc = this.ctx.createOscillator();
		const gain = this.ctx.createGain();
		
		// Kick = pitched down sine wave (60Hz -> 40Hz)
		osc.type = 'sine';
		osc.frequency.setValueAtTime(60, startTime);
		osc.frequency.exponentialRampToValueAtTime(40, startTime + 0.05);
		
		// Punchy envelope
		gain.gain.setValueAtTime(0.8, startTime);
		gain.gain.exponentialRampToValueAtTime(0.01, startTime + 0.3);
		
		osc.connect(gain);
		gain.connect(this.masterGain);
		
		osc.start(startTime);
		osc.stop(startTime + 0.3);
	}

	/**
	 * Play snare drum sound
	 * @private
	 */
	private playSnare(startTime: number): void {
		// Snare = white noise + tone
		const noise = this.ctx.createBufferSource();
		const noiseBuffer = this.ctx.createBuffer(1, this.ctx.sampleRate * 0.2, this.ctx.sampleRate);
		const data = noiseBuffer.getChannelData(0);
		
		// Generate white noise
		for (let i = 0; i < data.length; i++) {
			data[i] = Math.random() * 2 - 1;
		}
		noise.buffer = noiseBuffer;
		
		const noiseGain = this.ctx.createGain();
		const noiseFilter = this.ctx.createBiquadFilter();
		noiseFilter.type = 'highpass';
		noiseFilter.frequency.value = 1000;
		
		// Snappy envelope
		noiseGain.gain.setValueAtTime(0.3, startTime);
		noiseGain.gain.exponentialRampToValueAtTime(0.01, startTime + 0.15);
		
		noise.connect(noiseFilter);
		noiseFilter.connect(noiseGain);
		noiseGain.connect(this.masterGain);
		
		noise.start(startTime);
		noise.stop(startTime + 0.15);
		
		// Add tonal component
		const osc = this.ctx.createOscillator();
		const oscGain = this.ctx.createGain();
		osc.type = 'triangle';
		osc.frequency.value = 200;
		
		oscGain.gain.setValueAtTime(0.1, startTime);
		oscGain.gain.exponentialRampToValueAtTime(0.01, startTime + 0.1);
		
		osc.connect(oscGain);
		oscGain.connect(this.masterGain);
		
		osc.start(startTime);
		osc.stop(startTime + 0.1);
	}

	/**
	 * Play hi-hat sound
	 * @private
	 */
	private playHiHat(startTime: number): void {
		const noise = this.ctx.createBufferSource();
		const noiseBuffer = this.ctx.createBuffer(1, this.ctx.sampleRate * 0.05, this.ctx.sampleRate);
		const data = noiseBuffer.getChannelData(0);
		
		// Generate white noise
		for (let i = 0; i < data.length; i++) {
			data[i] = Math.random() * 2 - 1;
		}
		noise.buffer = noiseBuffer;
		
		const gain = this.ctx.createGain();
		const filter = this.ctx.createBiquadFilter();
		filter.type = 'highpass';
		filter.frequency.value = 7000; // High frequency for metallic sound
		
		// Quick, crisp envelope
		gain.gain.setValueAtTime(0.15, startTime);
		gain.gain.exponentialRampToValueAtTime(0.01, startTime + 0.05);
		
		noise.connect(filter);
		filter.connect(gain);
		gain.connect(this.masterGain);
		
		noise.start(startTime);
		noise.stop(startTime + 0.05);
	}

	// REMOVED: createJazzChords() - continuous chord progression removed per user request
	// REMOVED: createBassLine() - continuous bass line removed per user request
	// These created the constant drone sound that was distracting
	// Now only using drums + vinyl crackle for clean lofi vibe

	/**
	 * Start jazz chord progression with smooth voice leading
	 * Changes chords every 4 beats (measures)
	 * @private
	 */
	private startJazzProgression(tempo: number): void {
		const beatsPerMeasure = 4;
		const measureDuration = (60 / tempo) * beatsPerMeasure; // seconds per measure
		
		const playNextChord = () => {
			// Stop previous chord
			this.stopJazzChord();
			
			// Get current chord from progression
			const chord = this.jazzChordProgression[this.jazzChordIndex];
			console.log(`[AudioEngine] Jazz chord: ${chord.name}`);
			
			// Play the chord
			this.playJazzChord(chord.notes);
			
			// Advance to next chord
			this.jazzChordIndex = (this.jazzChordIndex + 1) % this.jazzChordProgression.length;
		};
		
		// Start immediately with first chord
		playNextChord();
		
		// Schedule chord changes
		this.jazzProgressionInterval = setInterval(playNextChord, measureDuration * 1000);
	}

	/**
	 * Play a jazz chord (4-note voicing)
	 * @private
	 */
	private playJazzChord(notes: number[]): void {
		const now = this.ctx.currentTime;
		
		// Create oscillator for each note in the chord
		for (const freq of notes) {
			const osc = this.ctx.createOscillator();
			const gain = this.ctx.createGain();
			
			// Use sine wave for warm jazz tone
			osc.type = 'sine';
			osc.frequency.setValueAtTime(freq, now);
			
			// Soft volume per note, overall chord is balanced
			gain.gain.setValueAtTime(0, now);
			gain.gain.linearRampToValueAtTime(0.08, now + 0.05); // Gentle attack
			
			osc.connect(gain);
			gain.connect(this.masterGain);
			
			osc.start(now);
			this.jazzChordOscillators.push(osc);
		}
	}

	/**
	 * Stop current jazz chord with fadeout
	 * @private
	 */
	private stopJazzChord(): void {
		const now = this.ctx.currentTime;
		const fadeOutDuration = 0.1; // Quick fade for chord changes
		
		for (const osc of this.jazzChordOscillators) {
			try {
				// Fade out
				const gainNode = osc.context.createGain();
				gainNode.gain.linearRampToValueAtTime(0, now + fadeOutDuration);
				osc.stop(now + fadeOutDuration);
			} catch (e) {
				// Already stopped
			}
		}
		
		this.jazzChordOscillators = [];
	}

	/**
	 * Start MIDI bass layer - plays bass notes (< C4) as continuous background
	 * @private
	 */
	private startMidiBass(mood: Mood, tempo: number): void {
		// Get bass notes for the current mood
		let bassNotes: number[];
		if (mood === 'river-flows') {
			bassNotes = this.riverFlowsBass;
		} else if (mood === 'kiss-the-rain') {
			bassNotes = this.kissTheRainBass;
		} else if (mood === 'thousand-years') {
			bassNotes = this.thousandYearsBass;
		} else if (mood === 'gurenge') {
			bassNotes = this.gurengeBass;
		} else {
			return; // No MIDI bass for this mood
		}
		
		// Bass notes create a foundation for the melody
		const beatDuration = 60 / tempo; // seconds per beat
		const noteDuration = beatDuration * 8; // Each bass note lasts 8 beats (2 measures at 4/4)
		
		const playNextBassNote = () => {
			const freq = bassNotes[this.midiBassIndex];
			const now = this.ctx.currentTime;
			
			// Create bass oscillator
			const osc = this.ctx.createOscillator();
			const gain = this.ctx.createGain();
			
			// Warm bass tone using sine wave
			osc.type = 'sine';
			osc.frequency.setValueAtTime(freq, now);
			
			// ADSR envelope for bass
			gain.gain.setValueAtTime(0, now);
			gain.gain.linearRampToValueAtTime(0.12, now + 0.1); // Gentle attack
			gain.gain.linearRampToValueAtTime(0.10, now + noteDuration - 0.2); // Sustain
			gain.gain.linearRampToValueAtTime(0, now + noteDuration); // Release
			
			osc.connect(gain);
			gain.connect(this.masterGain);
			
			osc.start(now);
			osc.stop(now + noteDuration);
			
			// Track oscillator for cleanup
			this.oscillators.push(osc);
			
			// Advance to next bass note
			this.midiBassIndex = (this.midiBassIndex + 1) % bassNotes.length;
		};
		
		// Start immediately with first bass note
		playNextBassNote();
		
		// Schedule bass note changes (every 8 beats)
		this.midiBassInterval = setInterval(playNextBassNote, noteDuration * 1000);
	}

	/**
	 * Start vinyl crackle/noise for lofi texture
	 * @private
	 */
	private startVinylNoise(): void {
		// Create pink noise buffer (softer than white noise)
		const bufferSize = this.ctx.sampleRate * 2; // 2 seconds of noise, looped
		const buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);
		const data = buffer.getChannelData(0);
		
		// Generate pink noise (1/f noise)
		let b0 = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0;
		for (let i = 0; i < bufferSize; i++) {
			const white = Math.random() * 2 - 1;
			b0 = 0.99886 * b0 + white * 0.0555179;
			b1 = 0.99332 * b1 + white * 0.0750759;
			b2 = 0.96900 * b2 + white * 0.1538520;
			b3 = 0.86650 * b3 + white * 0.3104856;
			b4 = 0.55000 * b4 + white * 0.5329522;
			b5 = -0.7616 * b5 - white * 0.0168980;
			data[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
			data[i] *= 0.11; // (roughly) compensate for gain
			b6 = white * 0.115926;
		}
		
		const noise = this.ctx.createBufferSource();
		noise.buffer = buffer;
		noise.loop = true;
		
		const noiseGain = this.ctx.createGain();
		noiseGain.gain.value = 0.02; // Very subtle
		
		const noiseFilter = this.ctx.createBiquadFilter();
		noiseFilter.type = 'lowpass';
		noiseFilter.frequency.value = 3000; // Remove harsh highs
		
		noise.connect(noiseFilter);
		noiseFilter.connect(noiseGain);
		noiseGain.connect(this.masterGain);
		
		noise.start();
		this.vinylNoiseNode = noise;
	}

	/**
	 * Stop all audio with fadeout
	 */
	stop(): void {
		if (!this.isPlaying) return;

		// Stop drum loop
		if (this.drumLoopInterval) {
			clearInterval(this.drumLoopInterval);
			this.drumLoopInterval = null;
		}
		
		// Stop jazz progression
		if (this.jazzProgressionInterval) {
			clearInterval(this.jazzProgressionInterval);
			this.jazzProgressionInterval = null;
		}
		this.stopJazzChord();
		
		// Stop MIDI bass
		if (this.midiBassInterval) {
			clearInterval(this.midiBassInterval);
			this.midiBassInterval = null;
		}
		
		// Stop vinyl noise
		if (this.vinylNoiseNode) {
			this.vinylNoiseNode.stop();
			this.vinylNoiseNode = null;
		}
		if (!this.isPlaying) return;

		const now = this.ctx.currentTime;
		const fadeOutDuration = 2; // 2 seconds

		// Fade out master gain
		this.masterGain.gain.cancelScheduledValues(now);
		this.masterGain.gain.setValueAtTime(this.masterGain.gain.value, now);
		this.masterGain.gain.exponentialRampToValueAtTime(0.001, now + fadeOutDuration);

		// Stop and disconnect all oscillators after fadeout
		setTimeout(() => {
			this.oscillators.forEach((osc) => {
				try {
					osc.stop();
					osc.disconnect();
				} catch (e) {
					// Oscillator may have already stopped
				}
			});
			this.filters.forEach((filter) => filter.disconnect());
			this.oscillators = [];
			this.filters = [];
			this.isPlaying = false;

			console.log('[AudioEngine] Stopped ambient music');
		}, fadeOutDuration * 1000);
	}

	/**
	 * Set volume (0-1 range)
	 */
	setVolume(volume: number): void {
		const clampedVolume = Math.max(0, Math.min(1, volume));
		this.masterGain.gain.cancelScheduledValues(this.ctx.currentTime);
		this.masterGain.gain.setValueAtTime(
			this.masterGain.gain.value,
			this.ctx.currentTime,
		);
		this.masterGain.gain.linearRampToValueAtTime(
			clampedVolume,
			this.ctx.currentTime + 0.1, // Smooth transition
		);
		console.log(`[AudioEngine] Volume set to ${(clampedVolume * 100).toFixed(0)}%`);
	}

	/**
	 * Get current playback state
	 */
	getState(): { isPlaying: boolean; mood: Mood | null; volume: number } {
		return {
			isPlaying: this.isPlaying,
			mood: this.currentMood,
			volume: this.masterGain.gain.value,
		};
	}

	/**
	 * Get the next note from the pentatonic scale
	 * Advances through the scale melodically for musical keystroke sounds
	 * @private
	 */
	private getNextScaleNote(): number {
		const note = this.pentatonicScale[this.currentScaleIndex];
		this.currentScaleIndex = (this.currentScaleIndex + 1) % this.pentatonicScale.length;
		return note;
	}

	/**
	 * Get next note from melody sequence (for melodic-flow mood)
	 * Loops back to start when reaching the end
	 * @private
	 */
	private getNextMelodyNote(): number {
		const note = this.melodySequence[this.melodyIndex];
		this.melodyIndex = (this.melodyIndex + 1) % this.melodySequence.length;
		console.log(`[AudioEngine] Melody note ${this.melodyIndex}/${this.melodySequence.length}: ${note}Hz`);
		return note;
	}

	/**
	 * Get next harmonized note for jazz-harmony mood
	 * Returns a note from the current chord's scale
	 * @private
	 */
	private getNextJazzNote(): number {
		const currentChord = this.jazzChordProgression[this.jazzChordIndex];
		const scale = this.jazzChordScales[currentChord.name as keyof typeof this.jazzChordScales];
		
		// Pick a note from the scale that harmonizes with current chord
		const note = scale[this.currentScaleIndex % scale.length];
		this.currentScaleIndex = (this.currentScaleIndex + 1) % scale.length;
		
		console.log(`[AudioEngine] Jazz note from ${currentChord.name}: ${note}Hz`);
		return note;
	}

	/**
	 * Get next note from MIDI melody (for MIDI-based moods)
	 * Returns notes >= C4 from the selected MIDI piece
	 * @private
	 */
	private getNextMidiNote(): number {
		let melodyNotes: number[];
		
		if (this.currentMood === 'river-flows') {
			melodyNotes = this.riverFlowsMelody;
		} else if (this.currentMood === 'kiss-the-rain') {
			melodyNotes = this.kissTheRainMelody;
		} else if (this.currentMood === 'thousand-years') {
			melodyNotes = this.thousandYearsMelody;
		} else if (this.currentMood === 'gurenge') {
			melodyNotes = this.gurengeMelody;
		} else {
			// Fallback to pentatonic scale
			return this.getNextScaleNote();
		}
		
		const note = melodyNotes[this.midiMelodyIndex];
		this.midiMelodyIndex = (this.midiMelodyIndex + 1) % melodyNotes.length;
		console.log(`[AudioEngine] MIDI melody note ${this.midiMelodyIndex}/${melodyNotes.length}: ${note}Hz`);
		return note;
	}

	/**
	 * Play an instrumental note with ADSR envelope
	 * Uses pentatonic scale for melodic progression instead of random frequencies
	 * @param instrument - Instrument configuration
	 * @param velocity - Note velocity (0-1)
	 * @param duration - Note duration in seconds (default 0.6 - shorter for snappier feel)
	 */
	playInstrumentNote(
		instrument: InstrumentConfig,
		velocity: number,
		duration: number = 0.6,
	): void {
		// Select note based on current mood
		let frequency: number;
		if (this.currentMood === 'melodic-flow') {
			frequency = this.getNextMelodyNote();
		} else if (this.currentMood === 'jazz-harmony') {
			frequency = this.getNextJazzNote();
		} else if (this.currentMood === 'thousand-years' || this.currentMood === 'kiss-the-rain' || this.currentMood === 'river-flows' || this.currentMood === 'gurenge') {
			frequency = this.getNextMidiNote();
		} else {
			// Get next note from pentatonic scale for other moods
			frequency = this.getNextScaleNote();
		}
		
		console.log(`[AudioEngine] playInstrumentNote: ${instrument.name}, ${frequency}Hz, vel=${velocity}`);
		
		const now = this.ctx.currentTime;
		const { envelope, waveform, harmonics = [] } = instrument;

		// For electric piano instrument, stop previous notes to prevent overlap
		if (instrument.name === 'Electric Piano') {
			// Stop all active piano notes with quick fadeout
			this.activePianoOscillators.forEach(({ osc, gain }) => {
				try {
					// Quick exponential fadeout over 50ms
					gain.gain.cancelScheduledValues(now);
					gain.gain.setValueAtTime(gain.gain.value, now);
					gain.gain.exponentialRampToValueAtTime(0.001, now + 0.05);
					osc.stop(now + 0.05);
					console.log(`[AudioEngine] Stopped previous electric piano note`);
				} catch (err) {
					// Oscillator may already be stopped, ignore
				}
			});
			// Clear the array
			this.activePianoOscillators = [];
		}

		// Create main oscillator
		const osc = this.ctx.createOscillator();
		osc.type = waveform;
		osc.frequency.setValueAtTime(frequency, now);
		console.log(`[AudioEngine] Created instrument oscillator: ${waveform} at ${frequency}Hz`);

		// Create gain node for ADSR envelope
		const gain = this.ctx.createGain();

		// ADSR envelope (per research.md)
		gain.gain.setValueAtTime(0, now);
		gain.gain.linearRampToValueAtTime(
			velocity * instrument.baseVolume,
			now + envelope.attack,
		); // Attack
		gain.gain.exponentialRampToValueAtTime(
			velocity * instrument.baseVolume * envelope.sustain,
			now + envelope.attack + envelope.decay,
		); // Decay
		gain.gain.setValueAtTime(
			velocity * instrument.baseVolume * envelope.sustain,
			now + envelope.attack + envelope.decay + duration - envelope.release,
		); // Sustain
		gain.gain.exponentialRampToValueAtTime(
			0.001,
			now + envelope.attack + envelope.decay + duration,
		); // Release

		// Connect oscillator through gain to master
		// For electric piano, add a bandpass filter for warm, bell-like tone
		if (instrument.name === 'Electric Piano') {
			const filter = this.ctx.createBiquadFilter();
			filter.type = 'bandpass';
			filter.frequency.setValueAtTime(1000 + frequency * 1.5, now); // Mid-range emphasis
			filter.Q.setValueAtTime(1.2, now); // Moderate resonance for bell character
			
			osc.connect(filter);
			filter.connect(gain);
			gain.connect(this.masterGain);
			console.log('[AudioEngine] ✅ Connected electric piano: oscillator → filter → gain → masterGain');
		} else {
			osc.connect(gain);
			gain.connect(this.masterGain);
			console.log('[AudioEngine] ✅ Connected instrument: oscillator → gain → masterGain');
		}

		// Add harmonic oscillators for richer timbre
		const harmonicOscs: OscillatorNode[] = [];
		harmonics.forEach((harmonic, index) => {
			const harmOsc = this.ctx.createOscillator();
			
			// For electric piano, use minimal inharmonicity for cleaner tone
			const isElectricPiano = instrument.name === 'Electric Piano';
			const inharmonicity = isElectricPiano ? 1 + (harmonic * harmonic - harmonic) * 0.00005 : 1;
			const harmonicFreq = frequency * harmonic * inharmonicity;
			
			// Use sine wave for harmonics on electric piano for pure, bell-like tone
			harmOsc.type = isElectricPiano ? 'sine' : waveform;
			harmOsc.frequency.setValueAtTime(harmonicFreq, now);

			const harmGain = this.ctx.createGain();
			// Harmonics decay faster and are quieter - electric piano-specific decay curve
			const harmonicVolume = isElectricPiano 
				? velocity * instrument.baseVolume * 0.25 * Math.pow(0.8, index)
				: velocity * instrument.baseVolume * 0.3 * (1 / (index + 2));
			harmGain.gain.setValueAtTime(0, now);
			harmGain.gain.linearRampToValueAtTime(harmonicVolume, now + envelope.attack);
			harmGain.gain.exponentialRampToValueAtTime(
				harmonicVolume * envelope.sustain,
				now + envelope.attack + envelope.decay,
			);
			harmGain.gain.setValueAtTime(
				harmonicVolume * envelope.sustain,
				now + envelope.attack + envelope.decay + duration - envelope.release,
			);
			harmGain.gain.exponentialRampToValueAtTime(
				0.001,
				now + envelope.attack + envelope.decay + duration,
			);

			harmOsc.connect(harmGain);
			harmGain.connect(this.masterGain);

			harmonicOscs.push(harmOsc);
		});

		// Start and schedule stop
		const totalDuration = envelope.attack + envelope.decay + duration;
		osc.start(now);
		osc.stop(now + totalDuration);
		console.log(`[AudioEngine] ✅ Instrument note playing for ${totalDuration.toFixed(2)}s`);
		
		harmonicOscs.forEach((harmOsc) => {
			harmOsc.start(now);
			harmOsc.stop(now + totalDuration);
		});
		console.log(`[AudioEngine] Started ${harmonicOscs.length} harmonic oscillators`);

		// Track electric piano notes to prevent overlap
		if (instrument.name === 'Electric Piano') {
			this.activePianoOscillators.push({ osc, gain });
			// Auto-cleanup after note finishes
			setTimeout(() => {
				const index = this.activePianoOscillators.findIndex(item => item.osc === osc);
				if (index !== -1) {
					this.activePianoOscillators.splice(index, 1);
				}
			}, totalDuration * 1000);
		}
	}

	/**
	 * Cleanup resources
	 */
	dispose(): void {
		this.stop();
		this.masterGain.disconnect();
	}
}

// Singleton instance
let audioEngineInstance: AudioEngine | null = null;

/**
 * Get or create AudioEngine singleton
 */
export function getAudioEngine(): AudioEngine {
	if (!audioEngineInstance) {
		audioEngineInstance = new AudioEngine();
	}
	return audioEngineInstance;
}
